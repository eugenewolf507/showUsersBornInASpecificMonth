{"version":3,"sources":["components/Legend/Legend.module.css","components/UsersTable/UsersTable.module.css","components/App/App.module.css","utils/usersAPI.js","utils/getMonthFromISODate.js","components/UsersTable/UsersTable.js","components/Legend/Legend.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","then","response","data","getMonthFromISODate","date","Date","getUTCMonth","UsersTable","usersList","month","className","styles","UsersTableWrapper","length","caption","map","user","key","id","firstName","lastName","dob","Legend","LegendTable","grey","blue","green","red","MonthButtonStyles","margin","padding","border","borderRadius","fontSize","fontFamily","width","monthList","getMonthColors","usersPerMonth","color","console","log","App","props","setMonth","evt","setState","desiredMonth","target","name","resetMonth","state","users","isLoading","error","this","usersAPI","catch","finally","filter","message","MonthList","index","type","onMouseOver","onFocus","onMouseOut","onBlur","style","backgroundColor","getMonthlyUserList","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fec645c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LegendTable\":\"Legend_LegendTable__1pYNK\",\"caption\":\"Legend_caption__1BdwI\",\"grey\":\"Legend_grey__3fJzW\",\"blue\":\"Legend_blue__2h9Er\",\"green\":\"Legend_green__1Xday\",\"red\":\"Legend_red__17-ma\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersTableWrapper\":\"UsersTable_UsersTableWrapper__1kdYz\",\"caption\":\"UsersTable_caption__3C2ax\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2bJAh\",\"MonthList\":\"App_MonthList__3AXLF\"};","import axios from 'axios';\n\nconst fetchUsers = () => {\n  return axios\n    .get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\n    .then(response => response.data);\n};\n\nexport default { fetchUsers };\n","function getMonthFromISODate(date) {\n  const tempdate = new Date(date);\n  const month = tempdate.getUTCMonth(); // + 1\n  return month;\n}\n\nexport default getMonthFromISODate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './UsersTable.module.css';\n\nconst UsersTable = ({ usersList, month }) => (\n  <table className={styles.UsersTableWrapper}>\n    {usersList.length > 0 ? (\n      <caption className={styles.caption}>\n        {usersList.length} users was born in {month}\n      </caption>\n    ) : (\n      <caption className={styles.caption}>Put mouse cursor over month</caption>\n    )}\n\n    {usersList.length > 0 &&\n      usersList.map(user => (\n        <tr key={user.id}>\n          <td>\n            {user.firstName} {user.lastName}\n          </td>\n          <td>{user.dob}</td>\n        </tr>\n      ))}\n  </table>\n);\n\nUsersTable.propTypes = {\n  usersList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  month: PropTypes.string.isRequired,\n};\n\nexport default UsersTable;\n","import React from 'react';\nimport styles from './Legend.module.css';\n\nconst Legend = () => (\n  <table className={styles.LegendTable}>\n    <caption className={styles.caption}>Legend:</caption>\n    <tr>\n      <td className={styles.grey}>[0-2]</td>\n      <td> grey</td>\n    </tr>\n    <tr>\n      <td className={styles.blue}>[3-6]</td>\n      <td> blue</td>\n    </tr>\n    <tr>\n      <td className={styles.green}>[7-10]</td>\n      <td> green</td>\n    </tr>\n    <tr>\n      <td className={styles.red}>[11+]</td>\n      <td> red</td>\n    </tr>\n  </table>\n);\n\nexport default Legend;\n","import React, { Component } from 'react';\nimport usersAPI from '../../utils/usersAPI';\nimport getMonthFromISODate from '../../utils/getMonthFromISODate';\nimport styles from './App.module.css';\nimport UsersTable from '../UsersTable/UsersTable';\nimport Legend from '../Legend/Legend';\n\nconst MonthButtonStyles = {\n  margin: 2,\n  padding: 3,\n  border: 0,\n  borderRadius: 2,\n  fontSize: 16,\n  fontFamily: 'inherit',\n  width: 100,\n};\n\nconst monthList = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst getMonthColors = usersPerMonth => {\n  let color = '';\n  if (usersPerMonth >= 0 && usersPerMonth <= 2) {\n    color = '#B2BABB'; // grey\n  } else if (usersPerMonth >= 3 && usersPerMonth <= 6) {\n    color = '#7FB3D5'; // blue\n  } else if (usersPerMonth >= 7 && usersPerMonth <= 10) {\n    color = '#7DCEA0'; // green\n  } else if (usersPerMonth >= 11) {\n    color = '#F1948A'; // red\n  } else {\n    console.log('Invalid value of usersPerMonth');\n  }\n  return color;\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [],\n      desiredMonth: '',\n      isLoading: false,\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n    usersAPI\n      .fetchUsers()\n      .then(users => this.setState({ users }))\n      .catch(error => this.setState({ error }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  setMonth = evt => {\n    this.setState({\n      desiredMonth: +evt.target.name,\n    });\n  };\n\n  getMonthlyUserList(month) {\n    // Calculate list of users per month\n    const { users } = this.state;\n    const usersList = users.filter(\n      user => getMonthFromISODate(user.dob) === month,\n    );\n    return usersList;\n  }\n\n  resetMonth = () => {\n    this.setState({\n      desiredMonth: '',\n    });\n  };\n\n  render() {\n    const { users, desiredMonth, isLoading, error } = this.state;\n\n    return (\n      <>\n        {error && <p>Whoops, something went wrong: {error.message}</p>}\n        {isLoading && <p>Loading...</p>}\n        {users.length > 0 && (\n          <div className={styles.App}>\n            <Legend />\n            <ul className={styles.MonthList}>\n              {monthList.map((month, index) => (\n                <li key={month}>\n                  <button\n                    type=\"button\"\n                    name={index}\n                    onMouseOver={this.setMonth}\n                    onFocus={this.setMonth}\n                    onMouseOut={this.resetMonth}\n                    onBlur={this.resetMonth}\n                    style={{\n                      ...MonthButtonStyles,\n                      backgroundColor: getMonthColors(\n                        this.getMonthlyUserList(index).length,\n                      ),\n                    }}\n                  >\n                    {month}\n                  </button>\n                </li>\n              ))}\n            </ul>\n\n            <UsersTable\n              usersList={this.getMonthlyUserList(desiredMonth)}\n              month={monthList[desiredMonth]}\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}